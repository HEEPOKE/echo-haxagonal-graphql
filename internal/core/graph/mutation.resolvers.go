package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"time"

	"github.com/HEEPOKE/echo-haxagonal-graphql/internal/core/graph/generated"
	model "github.com/HEEPOKE/echo-haxagonal-graphql/internal/core/graph/models_gen"
	"github.com/HEEPOKE/echo-haxagonal-graphql/internal/domain/models"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*models.User, error) {
	user := &models.User{
		Username:  input.Username,
		Email:     input.Email,
		Password:  input.Password,
		Tel:       input.Tel,
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}

	err := r.UserService.CreateUser(user)
	if err != nil {
		return nil, err
	}

	return user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UpdateUserInput) (*models.User, error) {
	user, err := r.UserService.GetUser(id)
	if err != nil {
		return nil, err
	}

	updatedUser := &models.User{
		ID:        user.ID,
		Username:  input.Username,
		Email:     input.Email,
		Password:  input.Password,
		Tel:       input.Tel,
		CreatedAt: user.CreatedAt,
		UpdatedAt: time.Now(),
	}

	err = r.UserService.UpdateUser(updatedUser)
	if err != nil {
		return nil, err
	}

	return updatedUser, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*bool, error) {
	err := r.UserService.DeleteUser(id)
	if err != nil {
		return nil, err
	}

	deleted := true
	return &deleted, nil
}

// CreateShop is the resolver for the createShop field.
func (r *mutationResolver) CreateShop(ctx context.Context, input model.CreateShopInput) (*models.Shop, error) {
	shop := &models.Shop{
		Name:      input.Name,
		Address:   input.Address,
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}

	err := r.ShopService.CreateShop(shop)
	if err != nil {
		return nil, err
	}

	return shop, nil
}

// UpdateShop is the resolver for the updateShop field.
func (r *mutationResolver) UpdateShop(ctx context.Context, id string, input model.UpdateShopInput) (*models.Shop, error) {
	shop, err := r.ShopService.GetShopByID(id)
	if err != nil {
		return nil, err
	}

	updatedShop := &models.Shop{
		ID:        shop.ID,
		Name:      input.Name,
		Address:   input.Address,
		CreatedAt: shop.CreatedAt,
		UpdatedAt: time.Now(),
	}

	err = r.ShopService.UpdateShop(updatedShop)
	if err != nil {
		return nil, err
	}

	return updatedShop, nil
}

// DeleteShop is the resolver for the deleteShop field.
func (r *mutationResolver) DeleteShop(ctx context.Context, id string) (*bool, error) {
	err := r.ShopService.DeleteShop(id)
	if err != nil {
		return nil, err
	}

	deleted := true
	return &deleted, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
